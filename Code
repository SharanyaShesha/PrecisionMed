# Install required packages
if (!requireNamespace("Seurat", quietly = TRUE)) install.packages("Seurat")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")

# Load libraries
library(Seurat)
library(ggplot2)

# Load single-cell data (replace with your file path)
single_cell_data <- read.csv("C:/Users/sunny/Downloads/GSE123818_Root_single_cell_wt_datamatrix.csv", row.names = 1)

# Create a Seurat object
seurat_obj <- CreateSeuratObject(counts = single_cell_data, project = "ArabidopsisRoot", min.cells = 3, min.features = 200)

# Inspect the Seurat object
print(seurat_obj)

# Normalize the data
seurat_obj <- NormalizeData(seurat_obj, normalization.method = "LogNormalize", scale.factor = 10000)

# Visualize QC metrics
VlnPlot(seurat_obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

seurat_obj <- NormalizeData(seurat_obj, normalization.method = "LogNormalize", scale.factor = 10000)

seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000)

seurat_obj <- ScaleData(seurat_obj, vars.to.regress = c("nCount_RNA", "percent.mt"))

# Run PCA
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(seurat_obj))

# Visualize PCA results
ElbowPlot(seurat_obj)  # Helps to select the number of PCs to use
DimPlot(seurat_obj, reduction = "pca", label = TRUE)

# Find neighbors and clusters
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:10)  # Adjust dims based on ElbowPlot
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)  # Adjust resolution for finer/coarser clusters

# Run UMAP
seurat_obj <- RunUMAP(seurat_obj, dims = 1:10)
DimPlot(seurat_obj, reduction = "umap", label = TRUE, pt.size = 0.5)

# Run t-SNE (optional)
seurat_obj <- RunTSNE(seurat_obj, dims = 1:10)
DimPlot(seurat_obj, reduction = "tsne", label = TRUE, pt.size = 0.5)

# Find marker genes for each cluster
cluster_markers <- FindAllMarkers(seurat_obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)

# View top markers
head(cluster_markers)

# Save the marker genes to a file
write.csv(cluster_markers, "Cluster_Markers.csv", row.names = FALSE)

# Manually assign cluster labels based on marker genes
new_cluster_ids <- c("Root Hair Cell", "Cortex Cell", "Endodermis Cell", ...)  # Example labels
names(new_cluster_ids) <- levels(seurat_obj)
seurat_obj <- RenameIdents(seurat_obj, new_cluster_ids)

# Filter for specific cluster markers (e.g., Cluster 1)
cluster_1_markers <- cluster_markers[cluster_markers$cluster == 1, ]

# Select the top markers for Cluster 1
head(cluster_1_markers)

# Visualize the annotated clusters
DimPlot(seurat_obj, reduction = "umap", label = TRUE, pt.size = 0.5)

# Identify differentially expressed genes between two clusters (e.g., Cluster 1 vs Cluster 2)
de_genes <- FindMarkers(seurat_obj, ident.1 = 1, ident.2 = 2, min.pct = 0.25, logfc.threshold = 0.25)

# View top differentially expressed genes
head(de_genes)

# Filter results by adjusted p-value and log-fold change
filtered_genes <- de_genes[de_genes$p_val_adj < 0.05 & abs(de_genes$avg_log2FC) > 1, ]

# Save differentially expressed genes to a file
write.csv(filtered_genes, "Differentially_Expressed_Genes.csv", row.names = TRUE)

# Create a volcano plot
library(ggplot2)
volcano_plot <- ggplot(de_genes, aes(x = avg_log2FC, y = -log10(p_val_adj))) +
  geom_point(aes(color = p_val_adj < 0.05)) +
  scale_color_manual(values = c("red", "black")) +
  labs(title = "Volcano Plot", x = "Log2 Fold Change", y = "-log10 Adjusted p-value") +
  theme_minimal()
print(volcano_plot)

# Plot violin plots for specific genes across clusters
VlnPlot(seurat_obj, features = c("AT1G01470", "AT3G30775", "AT4G05320"), pt.size = 0.5, ncol = 3)

# Visualize expression of marker genes on UMAP
FeaturePlot(seurat_obj, features = c("AT1G01470", "AT3G30775", "AT4G05320"))

# Save the Seurat object
saveRDS(seurat_obj, file = "Final_Seurat_Object.rds")

# Save UMAP plot
png("UMAP_Clusters.png", width = 800, height = 600)
DimPlot(seurat_obj, reduction = "umap", label = TRUE, pt.size = 0.5)
dev.off()

# Install the ComplexHeatmap package if not already installed
if (!requireNamespace("ComplexHeatmap", quietly = TRUE)) {
  install.packages("BiocManager")  # Install BiocManager if needed
  BiocManager::install("ComplexHeatmap")
}

# Load the ComplexHeatmap library
library(ComplexHeatmap)


# Save heatmap
pdf("Heatmap.pdf", width = 10, height = 8)
Heatmap(scaled_data, name = "Expression", cluster_rows = TRUE, cluster_columns = TRUE)
dev.off()

# Extract scaled data from the Seurat object
scaled_data <- GetAssayData(seurat_obj, slot = "scale.data")

# Check the dimensions of the scaled data
dim(scaled_data)  # Should return genes x cells

# Load the pheatmap library
library(pheatmap)

# Create a data frame for column annotations (clusters)
annotation <- data.frame(Cluster = seurat_obj$seurat_clusters)
rownames(annotation) <- colnames(scaled_data)

# Generate the heatmap
pdf("Heatmap_pheatmap.pdf", width = 10, height = 8)
pheatmap(scaled_data, 
         cluster_rows = TRUE, cluster_cols = TRUE, # Cluster rows and columns
         show_rownames = TRUE, show_colnames = FALSE, # Show gene names but not cell names
         annotation_col = annotation, # Add cluster annotations
         main = "Heatmap of Scaled Gene Expression")
dev.off()

# Select the top 10 marker genes for each cluster
library(dplyr)
top_markers <- cluster_markers %>% 
  group_by(cluster) %>% 
  top_n(n = 10, wt = avg_log2FC)

# Subset the scaled data for these marker genes
subset_scaled_data <- scaled_data[rownames(scaled_data) %in% top_markers$gene, ]

# Generate the heatmap for the subset
pdf("Heatmap_MarkerGenes.pdf", width = 10, height = 8)
Heatmap(subset_scaled_data, name = "Expression", 
        cluster_rows = TRUE, cluster_columns = TRUE,
        show_row_names = TRUE, show_column_names = FALSE,
        top_annotation = HeatmapAnnotation(Cluster = seurat_obj$seurat_clusters))
dev.off()
cluster_markers <- read.csv("Cluster_Markers.csv")

# Filter for significant markers (adjusted p-value < 0.05)
significant_markers <- subset(cluster_markers, p_val_adj < 0.05)

# Count the number of significant markers for each cluster
significant_markers_summary <- table(significant_markers$cluster)

# Sort clusters by the number of significant markers
significant_markers_summary <- sort(significant_markers_summary, decreasing = TRUE)

# Print summary of significant markers per cluster
print(significant_markers_summary)

cluster_3_markers <- subset(significant_markers, cluster == 3)

# Save markers for further analysis
write.csv(cluster_3_markers, "Cluster_3_Markers.csv", row.names = FALSE)

gene_list <- cluster_3_markers$gene  # Extract gene names

de_genes <- read.csv("Differentially_Expressed_Genes.csv")
filtered_genes <- de_genes[de_genes$p_val_adj < 0.05 & abs(de_genes$avg_log2FC) > 1, ]
gene_list <- rownames(filtered_genes)
print(gene_list)

go_bp <- enrichGO(gene = gene_list, 
                  OrgDb = org.At.tair.db, 
                  keyType = "TAIR", 
                  ont = "BP",  # Ontology: BP, MF, or CC
                  pvalueCutoff = 0.05, 
                  qvalueCutoff = 0.05, 
                  readable = TRUE)

cluster_markers <- read.csv("Cluster_Markers.csv")

# Filter for significant markers (adjusted p-value < 0.05)
significant_markers <- subset(cluster_markers, p_val_adj < 0.05)

# Count the number of significant markers for each cluster
significant_markers_summary <- table(significant_markers$cluster)

# Sort clusters by the number of significant markers
significant_markers_summary <- sort(significant_markers_summary, decreasing = TRUE)

# Print summary of significant markers per cluster
print(significant_markers_summary)

cluster_3_markers <- subset(significant_markers, cluster == 3)

# Save markers for further analysis
write.csv(cluster_3_markers, "Cluster_3_Markers.csv", row.names = FALSE)

gene_list <- cluster_3_markers$gene  # Extract gene names

de_genes <- read.csv("Differentially_Expressed_Genes.csv")
filtered_genes <- de_genes[de_genes$p_val_adj < 0.05 & abs(de_genes$avg_log2FC) > 1, ]
gene_list <- rownames(filtered_genes)
print(gene_list)

go_bp <- enrichGO(gene = gene_list, 
                  OrgDb = org.At.tair.db, 
                  keyType = "TAIR", 
                  ont = "BP",  # Ontology: BP, MF, or CC
                  pvalueCutoff = 0.05, 
                  qvalueCutoff = 0.05, 
                  readable = TRUE)
